---
- hosts: all

  vars:
    sql_server_deps: false
    skip_install_python: false
    python_version: "latest"
    skip_install_node: false
    node_version: "latest"
    wsl: '{{ "microsoft" in ansible_facts["kernel"] }}'
    common_dependencies:
      - curl
      - fzf
      - git
      - jq
      - neovim
      - tmux
      - tree
      - tree
      - vim
      - wget
      - zsh
    apt_dependencies:
      - silversearcher-ag
      - build-essential
      - libbz2-dev
      - libffi-dev
      - liblzma-dev
      - libreadline-dev
      - libsqlite3-dev
      - libssl-dev
      - python3-openssl
      - zlib1g-dev
      # database drivers
      - libpq-dev
      - redis-tools
      - unixodbc-dev
    brew_dependencies:
      - asdf
      - the_silver_searcher
      # database drivers
      - libpq
      - redis
      - unixodbc
      # for building python
      - coreutils
      - zlib
    shorthand_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture in ['aarch64', 'arm64'] else '' }}"


  tasks:
    - name: debug-arch
      debug:
        msg: "System architecture: {{ ansible_architecture }}"

    - name: debug-os-family
      debug:
        msg: "OS Family: {{ ansible_facts['os_family'] }}"

    - name: debug-is-wsl
      debug:
        msg: "Is WSL: {{ wsl }}"

    - name: APT Install dependencies
      when: ansible_facts['os_family'] in ['Debian', 'Ubuntu']
      apt:
        pkg: "{{ common_dependencies + apt_dependencies|select|list }}"
        state: present
      become: yes
      environment:
        ACCEPT_EULA: Y

    - name: Brew install dependencies
      community.general.homebrew:
        pkg: "{{ common_dependencies + brew_dependencies }}"
        state: present
      when: ansible_facts['os_family'] == 'Darwin'

    - name: Create home local bin directory
      file:
        path: "{{ ansible_env.HOME }}/.local/bin"
        state: directory
        mode: '0755'

    - name: Check if asdf is already present
      stat:
        path: "{{ ansible_env.HOME }}/.local/bin/asdf"
      register: asdf_check
      when: ansible_facts['os_family'] in ['Debian', 'Ubuntu']

    - name: Download asdf tar.gz
      get_url:
        url: "https://github.com/asdf-vm/asdf/releases/download/v0.16.4/asdf-v0.16.4-linux-{{ shorthand_arch }}.tar.gz"
        dest: "{{ ansible_env.HOME }}/asdf.tar.gz"
      when: ansible_facts['os_family'] in ['Debian', 'Ubuntu'] and shorthand_arch != '' and not asdf_check.stat.exists

    - name: Extract asdf tar.gz
      ansible.builtin.unarchive:
        src: "{{ ansible_env.HOME }}/asdf.tar.gz"
        dest: "{{ ansible_env.HOME }}/.local/bin"
        remote_src: true
      when: ansible_facts['os_family'] in ['Debian', 'Ubuntu'] and shorthand_arch != '' and not asdf_check.stat.exists

    - name: Delete asdf tar.gz
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/asdf.tar.gz"
        state: absent
      when: ansible_facts['os_family'] in ['Debian', 'Ubuntu'] and shorthand_arch != '' and not asdf_check.stat.exists

    - name: Install asdf python plugin
      command: "{{ ansible_env.HOME }}/.local/bin/asdf plugin add python"
      args:
        creates: "{{ ansible_env.HOME }}/.asdf/plugins/python"

    - name: Install asdf NodeJS plugin
      command: "{{ ansible_env.HOME }}/.local/bin/asdf plugin add nodejs"
      args:
        creates: "{{ ansible_env.HOME }}/.asdf/plugins/nodejs"

    - name: Install asdf golang plugin
      command: "{{ ansible_env.HOME }}/.local/bin/asdf plugin add golang"
      args:
        creates: "{{ ansible_env.HOME }}/.asdf/plugins/golang"

    - name: Install asdf Java plugin
      command: "{{ ansible_env.HOME }}/.local/bin/asdf plugin add java"
      args:
        creates: "{{ ansible_env.HOME }}/.asdf/plugins/java"

    - name: Install asdf Terraform plugin
      command: "{{ ansible_env.HOME }}/.local/bin/asdf plugin add terraform"
      args:
        creates: "{{ ansible_env.HOME }}/.asdf/plugins/terraform"

    - name: Install asdf aws-cli plugin
      command: "{{ ansible_env.HOME }}/.local/bin/asdf plugin add awscli"
      args:
        creates: "{{ ansible_env.HOME }}/.asdf/plugins/awscli"

    - name: Detect latest stable CPython version
      shell: "{{ ansible_env.HOME }}/.local/bin/asdf list all python | grep -E '^3\\.[0-9]+\\.[0-9]+$' | sort -V | tail -1"
      register: latest_python_version
      when: not skip_install_python | bool and python_version == "latest"

    - name: Set Python version to install
      set_fact:
        python_install_version: "{{ latest_python_version.stdout if python_version == 'latest' else python_version }}"
      when: not skip_install_python | bool

    - name: Install python {{ python_install_version }}
      command: "{{ ansible_env.HOME }}/.local/bin/asdf install python {{ python_install_version }} && {{ ansible_env.HOME }}/.local/bin/asdf set --home python {{ python_install_version }}"
      args:
        creates: "{{ ansible_env.HOME }}/.asdf/installs/python"
      when: not skip_install_python | bool

    - name: Install NodeJS {{ node_version }}
      command: "{{ ansible_env.HOME }}/.local/bin/asdf install nodejs {{ node_version }} && {{ ansible_env.HOME }}/.local/bin/asdf set --home nodejs {{ node_version }}"
      args:
        creates: "{{ ansible_env.HOME }}/.asdf/installs/nodejs"
      when: not skip_install_node | bool

    - name: Install oh-my-zsh
      git:
        depth: 2
        repo: https://github.com/robbyrussell/oh-my-zsh.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh"

    - name: Install zsh syntax highlight
      git:
        depth: 2
        repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/zsh-syntax-highlighting"

    - name: Install z
      get_url:
        url: https://raw.githubusercontent.com/rupa/z/master/z.sh
        dest: "{{ ansible_env.HOME }}"

    - name: Scripts
      synchronize:
        src: ./scripts/
        dest: "{{ ansible_env.HOME }}/.local/scripts/"

    - name: zshrc
      template:
        src: ./templates/zshrc
        dest: "{{ ansible_env.HOME }}/.zshrc"

    - name: Create vim themes path
      file:
        path: "{{ ansible_env.HOME }}/.vim/colors"
        state: directory

    - name: Download vim monokai
      get_url:
        url: https://raw.githubusercontent.com/sickill/vim-monokai/master/colors/monokai.vim
        dest: "{{ ansible_env.HOME }}/.vim/colors"

    - name: vimrc
      copy:
        src: ./templates/vimrc
        dest: "{{ ansible_env.HOME }}/.vimrc"

    # NeoVim configuration

    - name: Create directory for vim-plug
      file:
        path: "{{ ansible_env.HOME }}/.local/share/nvim/site/autoload"
        state: directory

    - name: Install vim-plug for neovim
      get_url:
        url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        dest: "{{ ansible_env.HOME }}/.local/share/nvim/site/autoload/plug.vim"

    - name: nvim config dir
      file:
        path: "{{ ansible_env.HOME }}/.config/nvim"
        state: directory
        recurse: true

    - name: nvim init file
      copy:
        src: ./templates/init.vim
        dest: "{{ ansible_env.HOME }}/.config/nvim/init.vim"

    - name: Install nvim dependencies
      command: nvim --headless +PlugInstall +qall
      args:
        creates: "{{ ansible_env.HOME }}/.local/shared/nvim/site/plugged/vim/autoload/dracula.vim"

    # END NeoVim configuration

    - name: tmux config
      copy:
        src: ./templates/tmux.conf
        dest: "{{ ansible_env.HOME }}/.tmux.conf"

    - name: Install git-fire
      get_url:
        url: https://raw.githubusercontent.com/qw3rtman/git-fire/refs/heads/master/git-fire
        dest: "{{ ansible_env.HOME }}/.local/bin/git-fire"
        mode: "0755"

    - name: Install git-open
      get_url:
        url: https://raw.githubusercontent.com/paulirish/git-open/refs/heads/master/git-open
        dest: "{{ ansible_env.HOME }}/.local/bin/git-open"
        mode: "0755"

    - name: Install Fabric AI (MacOS)
      get_url:
        url: https://github.com/danielmiessler/fabric/releases/latest/download/fabric-darwin-{{ shorthand_arch }}
        dest: "{{ ansible_env.HOME }}/.local/bin/fabric"
      when: ansible_facts['os_family'] == 'Darwin'

    - name: Install Fabric AI (Linux)
      get_url:
        url: https://github.com/danielmiessler/fabric/releases/latest/download/fabric-linux-{{ shorthand_arch }}
        dest: "{{ ansible_env.HOME }}/.local/bin/fabric"
        mode: "0755"
      when: ansible_facts['os_family'] in ['Debian', 'Ubuntu']
...
