---
- hosts: all

  vars:
    sql_server_deps: false
    skip_install_python: false
    python_version: "3.8.12"
    os: linux
    wsl: false
    common_dependencies:
      - curl
      - wget
      - git
      - tmux
      - vim
      - neovim
      - zsh
    apt_dependencies:
      - silversearcher-ag
      # database drivers
      - libpq-dev
      - unixodbc-dev
      # if sql_server_deps is truthy, add ms sql server deps
      - "{{ sql_server_deps | bool | ternary('msodbcsql17', '') }}"
      - "{{ sql_server_deps | bool | ternary('mssql-tools', '') }}"
      # for building python
      - build-essential
      - libbz2-dev
      - libffi-dev
      - liblzma-dev
      - libreadline-dev
      - libsqlite3-dev
      - libssl-dev
      - python-openssl
      - zlib1g-dev
      # Redis cli
      - redis-tools
    brew_dependencies:
      - the_silver_searcher
      # database drivers
      - libpq
      - unixodbc
      # for building python
      - zlib

  tasks:
    - name: Add microsoft packages key
      apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present
      become: yes
      when: sql_server_deps | bool

    - name: Add mssql packages
      get_url:
        url: https://packages.microsoft.com/config/ubuntu/18.04/prod.list
        dest: /etc/apt/sources.list.d/mssql-release.list
      become: yes
      when: sql_server_deps | bool

    - name: APT Install dependencies
      when: not os == "macos"
      apt:
        pkg: "{{ common_dependencies + apt_dependencies|select|list }}"
        state: present
      become: yes
      environment:
        ACCEPT_EULA: Y

    - name: Brew install dependencies
      community.general.homebrew:
        pkg: "{{ common_dependencies + brew_dependencies }}"
        state: present
      when: os == "macos"

    - name: Install nvm
      git:
        repo: https://github.com/creationix/nvm.git
        version: v0.39.0
        dest: "{{ ansible_env.HOME }}/.nvm"

    - name: Install goenv
      git:
        repo: https://github.com/syndbg/goenv.git
        dest: "{{ ansible_env.HOME }}/.goenv"

    - name: Install jenv
      git:
        repo: https://github.com/jenv/jenv.git
        dest: "{{ ansible_env.HOME }}/.jenv"

    # python requirements
    - name: Download pyenv installer
      get_url:
        url: https://pyenv.run
        dest: "{{ ansible_env.HOME }}/.pyenv_install.sh"

    - name: Install pyenv
      command: /bin/bash "{{ ansible_env.HOME }}/.pyenv_install.sh"
      args:
        creates: "{{ ansible_env.HOME }}/.pyenv"

    - name: Install python {{ python_version }}
      command: "{{ ansible_env.HOME }}/.pyenv/bin/pyenv install {{ python_version }}"
      args:
        creates: "{{ ansible_env.HOME }}/.pyenv/versions/{{ python_version }}"
      when: not skip_install_python | bool

    - name: Install pipenv
      command: "{{ ansible_env.HOME }}/.pyenv/shims/pip install --user pipenv"
      args:
        creates: "{{ ansible_env.HOME }}/.pyenv/shims/pipenv"
      environment:
        PYENV_VERSION: "{{ python_version }}"
      when: not skip_install_python | bool

    - name: Install gimme-aws-creds
      command: "{{ ansible_env.HOME }}/.pyenv/shims/pip install --user --upgrade gimme-aws-creds"
      args:
        creates: "{{ ansible_env.HOME }}/.pyenv/shims/gimme-aws-creds"
      environment:
        PYENV_VERSION: "{{ python_version }}"
      when: not skip_install_python | bool

    # END python requirements

    - name: Install oh-my-zsh
      git:
        repo: https://github.com/robbyrussell/oh-my-zsh.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh"

    - name: Install zsh syntax highlight
      git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/zsh-syntax-highlighting"

    - name: Install z
      get_url:
        url: https://raw.githubusercontent.com/rupa/z/master/z.sh
        dest: "{{ ansible_env.HOME }}"

    - name: zshrc
      template:
        src: ./templates/zshrc
        dest: "{{ ansible_env.HOME }}/.zshrc"

    - name: Create vim themes path
      file:
        path: "{{ ansible_env.HOME }}/.vim/colors"
        state: directory

    - name: Download vim monokai
      get_url:
        url: https://raw.githubusercontent.com/sickill/vim-monokai/master/colors/monokai.vim
        dest: "{{ ansible_env.HOME }}/.vim/colors"

    - name: vimrc
      copy:
        src: ./templates/vimrc
        dest: "{{ ansible_env.HOME }}/.vimrc"

    # NeoVim configuration

    - name: Create directory for vim-plug
      file:
        path: "{{ ansible_env.HOME }}/.local/share/nvim/site/autoload"
        state: directory

    - name: Install vim-plug for neovim
      get_url:
        url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        dest: "{{ ansible_env.HOME }}/.local/share/nvim/site/autoload/plug.vim"

    - name: nvim config dir
      file:
        path: "{{ ansible_env.HOME }}/.config/nvim"
        state: directory
        recurse: true

    - name: nvim init file
      copy:
        src: ./templates/init.vim
        dest: "{{ ansible_env.HOME }}/.config/nvim/init.vim"

    - name: Install nvim dependencies
      command: nvim --headless +PlugInstall +qall
      args:
        creates: "{{ ansible_env.HOME }}/.local/shared/nvim/site/plugged/vim/autoload/dracula.vim"

    # END NeoVim configuration

    - name: tmux config
      copy:
        src: ./templates/tmux.conf
        dest: "{{ ansible_env.HOME }}/.tmux.conf"
...
