---
- hosts: all

  vars:
    ansible_python_interpreter: /usr/bin/python3
    sql_server_deps: false
    skip_install_python: false
    python_version: "latest"
    skip_install_node: false
    node_version: "latest"
    wsl: '{{ "microsoft" in ansible_facts["kernel"] }}'
    common_dependencies:
      - curl
      - git
      - jq
      - neovim
      - nushell
      - tmux
      - tree
      - tree
      - vim
      - wget
      - zsh
    apt_dependencies:
      - silversearcher-ag
      - build-essential
      - libbz2-dev
      - libffi-dev
      - liblzma-dev
      - libreadline-dev
      - libsqlite3-dev
      - libssl-dev
      - python3-openssl
      - zlib1g-dev
      # database drivers
      - libpq-dev
      - redis-tools
      - unixodbc-dev
    brew_dependencies:
      - asdf
      - fzf
      - glow
      - the_silver_searcher
      # database drivers
      - libpq
      - redis
      - unixodbc
      # for building python
      - coreutils
      - zlib
    shorthand_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' if ansible_architecture in ['aarch64', 'arm64'] else '' }}"

  tasks:
    - name: debug-arch
      debug:
        msg: "System architecture: {{ ansible_architecture }}"

    - name: debug-os-family
      debug:
        msg: "OS Family: {{ ansible_facts['os_family'] }}"

    - name: debug-is-wsl
      debug:
        msg: "Is WSL: {{ wsl }}"

    - name: Create home local bin directory
      file:
        path: "{{ ansible_env.HOME }}/.local/bin"
        state: directory
        mode: "0755"

    - name: Update apt cache
      when: ansible_facts['os_family'] in ['Debian', 'Ubuntu']
      apt:
        update_cache: yes
      become: yes

    - name: Install nushell [Linux only]
      include_role:
        name: nushell
      when: ansible_facts['os_family'] in ['Debian', 'Ubuntu']

    - name: APT Install dependencies
      when: ansible_facts['os_family'] in ['Debian', 'Ubuntu']
      apt:
        pkg: "{{ common_dependencies + apt_dependencies|select|list }}"
        state: present
      become: yes
      environment:
        ACCEPT_EULA: Y

    - name: Install glow [Linux only]
      include_role:
        name: glow
      when: ansible_facts['os_family'] in ['Debian', 'Ubuntu']

    - name: Install fzf [Linux only]
      include_role:
        name: fzf
      when: ansible_facts['os_family'] in ['Debian', 'Ubuntu']

    - name: Brew install dependencies
      community.general.homebrew:
        pkg: "{{ common_dependencies + brew_dependencies }}"
        state: present
      when: ansible_facts['os_family'] == 'Darwin'

    - name: Setup asdf and install languages
      include_role:
        name: asdf

    - name: Install oh-my-zsh
      git:
        depth: 2
        repo: https://github.com/robbyrussell/oh-my-zsh.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh"

    - name: Install zsh syntax highlight
      git:
        depth: 2
        repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/zsh-syntax-highlighting"

    - name: Install z
      get_url:
        url: https://raw.githubusercontent.com/rupa/z/master/z.sh
        dest: "{{ ansible_env.HOME }}"

    - name: Scripts
      synchronize:
        src: ./scripts/
        dest: "{{ ansible_env.HOME }}/.local/scripts/"

    - name: zshrc
      template:
        src: ./templates/zshrc
        dest: "{{ ansible_env.HOME }}/.zshrc"

    - name: Create vim themes path
      file:
        path: "{{ ansible_env.HOME }}/.vim/colors"
        state: directory

    - name: Download vim monokai
      get_url:
        url: https://raw.githubusercontent.com/sickill/vim-monokai/master/colors/monokai.vim
        dest: "{{ ansible_env.HOME }}/.vim/colors"

    - name: vimrc
      copy:
        src: ./templates/vimrc
        dest: "{{ ansible_env.HOME }}/.vimrc"

    # NeoVim configuration
    - name: Configure NeoVim
      include_role:
        name: neovim

    - name: tmux config
      template:
        src: ./templates/tmux.conf
        dest: "{{ ansible_env.HOME }}/.tmux.conf"

    - name: Setup Git plugins
      include_role:
        name: git

    - name: Install Fabric AI
      include_role:
        name: fabric
